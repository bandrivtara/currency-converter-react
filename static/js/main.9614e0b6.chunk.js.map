{"version":3,"sources":["components/Title/Title.jsx","components/Converter/CurrencyDefinition/CurrencyDefinition.jsx","components/Converter/CurrencyDefinition/CurrencyDefinitionContainer.js","actions/index.js","components/Converter/Transactions/TransactionsCreator/TransactionsCreator.jsx","components/Converter/Transactions/TransactionsCreator/TransactionsCreatorContainer.js","lib/helpers.js","components/Converter/Transactions/TransactionsList/TransactionsList.jsx","components/Converter/Transactions/TransactionsList/TransactionsListContainer.js","components/Converter/Transactions/TransactionsAmount/TransactionsSum.jsx","components/Converter/Transactions/TransactionsAmount/TransactionsSumContainer.js","components/Converter/Transactions/TransactionLargest/TransactionLargest.jsx","components/Converter/Transactions/TransactionLargest/TransactionLargestContainer.js","components/Converter/Transactions/Transactions.js","components/Converter/Converter.js","components/App.js","reducers/transactions.js","reducers/currency.js","reducers/index.js","index.js"],"names":["Title","className","CurrencyDefinition","actualCurrencyAmount","changeCurrencyAmount","type","step","value","onChange","connect","state","currency","setCurrencyAmount","event","newCurrencyAmount","target","TransactionsCreator","name","changeName","euroAmount","changeEuroAmount","createTransaction","validator","onSubmit","TransactionsCreatorContainer","addTransaction","useState","setName","setEuroAmount","setValidator","preventDefault","Number","convertToPln","amount","euro","plnAmount","roundAmount","toFixed","Math","round","TransactionsList","transactionsList","removeTransaction","map","elem","key","id","onClick","TransactionsListContainer","deleteTransaction","transactionId","TransactionsSum","sumTransactions","sumPln","sumEuro","TransactionsSumContainer","reduce","sum","current","length","TransactionLargest","currentLargestTransaction","TransactionLargestContainer","transactionsEuroAmount","largestEuroAmount","max","apply","filter","transactions","Converter","App","ids","require","initialState","action","generate","transaction","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"wfAQeA,G,OAND,WACV,OACI,wBAAIC,UAAU,SAAd,0BCMOC,EARY,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,qBAAsBC,EAA2B,EAA3BA,qBAChD,OACI,yBAAKH,UAAU,sBACX,uCAAY,2BAAOI,KAAK,SAASC,KAAK,QAAQC,MAAOJ,EAAsBK,SAAUJ,IAArF,U,QCyBGK,eAPS,SAACC,GACrB,MAAO,CACHP,qBAAsBO,EAAMC,SAASR,wBAKL,CAACS,kBC9BR,SAAAL,GAAK,MAAK,CACzCF,KAAM,sBACNE,MAAOA,KD4BME,EAxBqB,SAAC,GAAiD,IAA/CN,EAA8C,EAA9CA,qBAAsBS,EAAwB,EAAxBA,kBAQzD,OACI,6BACI,kBAAC,EAAD,CACIT,qBAAsBA,EACtBC,qBATiB,SAACS,GAC1B,IAAIC,EAAoBD,EAAME,OAAOR,MACrCK,EAAkBE,U,QEUXE,EAnBa,SAAC,GAAsF,IAApFC,EAAmF,EAAnFA,KAAMC,EAA6E,EAA7EA,WAAYC,EAAiE,EAAjEA,WAAYC,EAAqD,EAArDA,iBAAkBC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,UAC9F,OACI,0BAAMC,SAAUF,EAAmBpB,UAAU,uBACzC,oDACA,yBAAKA,UAAU,YACX,2BAAOI,KAAK,OAAOE,MAAOU,EAAMT,SAAUU,IAC1C,2BAAOjB,UAAS,sBAAiBgB,GAAQ,WAAzC,oBACA,2BAAOhB,UAAWqB,GAAa,eAA/B,qBAEJ,yBAAKrB,UAAU,YACX,2BAAOI,KAAK,SAASC,KAAK,OAAOC,MAAOY,EAAYX,SAAUY,IAC9D,2BAAOnB,UAAS,sBAAiBkB,GAAc,WAA/C,gBACA,2BAAOlB,UAAWqB,GAAa,eAA/B,4BAEJ,2BAAOjB,KAAK,SAASE,MAAM,YCsBxBiB,EAnCsB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EACjCC,mBAAS,IADwB,mBAClDT,EADkD,KAC5CU,EAD4C,OAErBD,mBAAS,IAFY,mBAElDP,EAFkD,KAEtCS,EAFsC,OAGvBF,oBAAS,GAHc,mBAGlDJ,EAHkD,KAGvCO,EAHuC,KAwBzD,OACI,kBAAC,EAAD,CACIZ,KAAMA,EACNE,WAAYA,EACZD,WApBW,SAACL,GAChBc,EAAQd,EAAME,OAAOR,QAoBjBa,iBAxBiB,SAACP,GACtBe,EAAcf,EAAME,OAAOR,QAwBvBc,kBAlBkB,SAACR,GACvBA,EAAMiB,iBACFb,GAAQE,GACRM,EAAeR,EAAMc,OAAOZ,IAC5BQ,EAAQ,IACRC,EAAc,IACdC,GAAa,IAEbA,GAAa,IAWbP,UAAWA,KClCVU,EAAe,SAACC,EAAQC,GACjC,IAAIC,EAAYD,EAAOD,EACnBG,EAAcD,EAAUE,QAAQ,GAEpC,OADAF,EAAYG,KAAKC,MAAoB,IAAdH,GAAqB,KCoBjCI,EApBU,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,iBAAkBtC,EAA8C,EAA9CA,qBAAsBuC,EAAwB,EAAxBA,kBAChE,OACI,yBAAKzC,UAAU,oBACX,yBAAKA,UAAW,aACZ,mDAA8B,sCADlC,MACsD,sCAEtD,4BACKwC,EAAiBE,KAAI,SAAAC,GAClB,IAAIT,EAAYH,EAAa7B,EAAsByC,EAAKV,MACxD,OACI,wBAAIW,IAAKD,EAAKE,IACV,8BAAOF,EAAK3B,KAAZ,KAAyB,8BAAO2B,EAAKV,MADzC,MACwD,8BAAOC,GAC3D,4BAAQY,QAAS,WAAQL,EAAkBE,EAAKE,MAAhD,oBCKbE,EAjBmB,SAAC,GAAmE,IAAjEP,EAAgE,EAAhEA,iBAAkBtC,EAA8C,EAA9CA,qBAAsB8C,EAAwB,EAAxBA,kBASzE,OACI,kBAAC,EAAD,CACIR,iBAAkBA,EAClBtC,qBAAsBA,EACtBuC,kBAXkB,SAACQ,GACvBD,EAAkBC,OCQXC,EAZS,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAEhD,OACI,yBAAKrD,UAAU,kBACX,yDACA,iDAAamD,GACb,sCAAYE,GACZ,qCAAWD,KCcRE,EAnBkB,SAAC,GAAgD,IAA9Cd,EAA6C,EAA7CA,iBAAkBtC,EAA2B,EAA3BA,qBAG9CmD,EADyBb,EAAiBE,KAAI,SAAAC,GAAI,OAAIA,EAAKV,QAC1BsB,QAAO,SAAUC,EAAKC,GACvD,OAAOD,EAAMC,IACd,GAECL,EAASrB,EAAa7B,EAAsBmD,GAE5CF,EAAkBX,EAAiBkB,OAEvC,OACI,kBAAC,EAAD,CACIP,gBAAiBA,EACjBE,QAASA,EACTD,OAAQA,KCPLO,EAVY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,0BAE1B,OACI,yBAAK5D,UAAU,sBACX,oEACA,4BAAK4D,KCgBFC,EAnBqB,SAAC,GAAgD,IAA9CrB,EAA6C,EAA7CA,iBAAkBtC,EAA2B,EAA3BA,qBAEjD4D,EAAyBtB,EAAiBE,KAAI,SAAAC,GAAI,OAAIA,EAAKV,QAC3D8B,EAAoB1B,KAAK2B,IAAIC,MAAM,KAAMH,GAEzCF,EAA4BpB,EAC3B0B,QAAO,SAAAvB,GAAI,OAAIA,EAAKV,OAAS8B,KAC7BrB,KAAI,SAAAC,GACD,IAAIT,EAAYH,EAAa7B,EAAsByC,EAAKV,MACxD,OACI,wBAAIW,IAAKD,EAAKE,IAAd,IAAmB,2BAAIF,EAAK3B,KAAT,IAAgB2B,EAAKV,KAArB,WAAmCC,EAAnC,YAI/B,OACI,kBAAC,EAAD,CAAoB0B,0BAA2BA,KCexCpD,eAPS,SAACC,GACrB,MAAO,CACHP,qBAAsBO,EAAMC,SAASR,qBACrCsC,iBAAkB/B,EAAM0D,aAAa3B,oBAIL,CAAEhB,eV9BZ,SAACR,EAAME,GAAP,MAAuB,CACnDd,KAAM,kBACNY,KAAMA,EACNE,WAAYA,IU2B4C8B,kBVzBzB,SAACC,GAAD,MAAoB,CACnD7C,KAAM,qBACN6C,cAAeA,KUuBFzC,EA1BM,SAAC,GAAmF,IAAjFgC,EAAgF,EAAhFA,iBAAkBtC,EAA8D,EAA9DA,qBAAsBsB,EAAwC,EAAxCA,eAAgBwB,EAAwB,EAAxBA,kBAC5E,OACI,yBAAKhD,UAAU,gBACX,kBAAC,EAAD,CACIwB,eAAgBA,IACpB,kBAAC,EAAD,CACIgB,iBAAkBA,EAClBtC,qBAAsBA,EACtB8C,kBAAmBA,IACvB,kBAAC,EAAD,CACIR,iBAAkBA,EAClBtC,qBAAsBA,IAC1B,kBAAC,EAAD,CACIsC,iBAAkBA,EAClBtC,qBAAsBA,QCTvBkE,EATG,WACd,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCOGC,MATf,WACE,OACE,yBAAKrE,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,yBCVFsE,EAAMC,EAAQ,KAEZC,EAAe,CACnBhC,iBAAkB,CAChB,CAAEK,GAAI,EAAG7B,KAAM,QAASiB,KAAM,IAC9B,CAAEY,GAAI,EAAG7B,KAAM,SAAUiB,KAAM,GAC/B,CAAEY,GAAI,EAAG7B,KAAM,QAASiB,KAAM,MA6BnBkC,EAzBM,WAAmC,IAAlC1D,EAAiC,uDAAzB+D,EAAcC,EAAW,uCACrD,OAAQA,EAAOrE,MACb,IAAK,kBACH,OAAO,2BACFK,GADL,IAEE+B,iBAAiB,GAAD,mBACX/B,EAAM+B,kBADK,CAEd,CACEK,GAAIyB,EAAII,WACR1D,KAAMyD,EAAOzD,KACbiB,KAAMwC,EAAOvD,gBAIrB,IAAK,qBACH,OAAO,2BACFT,GADL,IAEE+B,iBACE/B,EAAM+B,iBAAiB0B,QAAO,SAACS,GAAD,OAAiBA,EAAY9B,KAAO4B,EAAOxB,mBAE/E,QACE,OAAOxC,IC/BP+D,EAAe,CACnBtE,qBAAsB,MAeTQ,EAZE,WAAmC,IAAlCD,EAAiC,uDAAzB+D,EAAcC,EAAW,uCACjD,OAAQA,EAAOrE,MACb,IAAK,sBACH,OAAO,2BACFK,GADL,IAEEP,qBAAsBuE,EAAOnE,QAEjC,QACE,OAAOG,ICREmE,cAAgB,CAC3BlE,WACAyD,iBCEEU,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.9614e0b6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <h2 className=\"title\">Przelicznik walutowy</h2>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React from 'react'\r\n\r\nconst CurrencyDefinition = ({ actualCurrencyAmount, changeCurrencyAmount }) => {\r\n    return (\r\n        <div className=\"currencyDefinition\">\r\n            <p>1 EURO = <input type=\"number\" step=\"0.001\" value={actualCurrencyAmount} onChange={changeCurrencyAmount} /> PLN</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencyDefinition\r\n","import React from 'react';\r\nimport CurrencyDefinition from './CurrencyDefinition';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrencyAmount } from '../../../actions';\r\n\r\n\r\nconst CurrencyDefinitionContainer = ({ actualCurrencyAmount, setCurrencyAmount }) => {\r\n\r\n\r\n    const changeCurrencyAmount = (event) => {\r\n        let newCurrencyAmount = event.target.value;\r\n        setCurrencyAmount(newCurrencyAmount);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CurrencyDefinition\r\n                actualCurrencyAmount={actualCurrencyAmount}\r\n                changeCurrencyAmount={changeCurrencyAmount} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        actualCurrencyAmount: state.currency.actualCurrencyAmount\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {setCurrencyAmount})(CurrencyDefinitionContainer);","export const setCurrencyAmount = value => ({\r\n  type: 'SET_CURRENCY_AMOUNT',\r\n  value: value\r\n})\r\nexport const addTransaction = (name, euroAmount) => ({\r\n  type: 'ADD_TRANSACTION',\r\n  name: name,\r\n  euroAmount: euroAmount\r\n})\r\nexport const deleteTransaction = (transactionId) => ({\r\n  type: 'DELETE_TRANSACTION',\r\n  transactionId: transactionId\r\n})\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst TransactionsCreator = ({ name, changeName, euroAmount, changeEuroAmount, createTransaction, validator }) => {\r\n    return (\r\n        <form onSubmit={createTransaction} className=\"transactionsCreator\">\r\n            <legend>Dodaj transakcje</legend>\r\n            <div className=\"inputBox\">\r\n                <input type=\"text\" value={name} onChange={changeName} />\r\n                <label className={`placeHolder ${name && \"active\"}`}>Nazwa transakcji</label>\r\n                <label className={validator && \"activeWrong\"}>Wpisz nazwę</label>\r\n            </div>\r\n            <div className=\"inputBox\">\r\n                <input type='number' step=\"0.01\" value={euroAmount} onChange={changeEuroAmount} />\r\n                <label className={`placeHolder ${euroAmount && \"active\"}`}>Kwota w Euro</label>\r\n                <label className={validator && \"activeWrong\"}>Wpisz wartość</label>\r\n            </div>\r\n            <input type=\"submit\" value=\"Dodaj\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TransactionsCreator\r\n","import React, { useState } from 'react';\r\nimport TransactionsCreator from './TransactionsCreator';\r\n\r\nconst TransactionsCreatorContainer = ({ addTransaction }) => {\r\n    const [name, setName] = useState('');\r\n    const [euroAmount, setEuroAmount] = useState('');\r\n    const [validator, setValidator] = useState(false)\r\n\r\n    const changeEuroAmount = (event) => {\r\n        setEuroAmount(event.target.value);\r\n    }\r\n    const changeName = (event) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    const createTransaction = (event) => {\r\n        event.preventDefault();\r\n        if (name && euroAmount) {\r\n            addTransaction(name, Number(euroAmount))\r\n            setName('');\r\n            setEuroAmount('');\r\n            setValidator(false)\r\n        } else {\r\n            setValidator(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TransactionsCreator\r\n            name={name}\r\n            euroAmount={euroAmount}\r\n            changeName={changeName}\r\n            changeEuroAmount={changeEuroAmount}\r\n            createTransaction={createTransaction}\r\n            validator={validator} />\r\n    )\r\n}\r\n\r\nexport default TransactionsCreatorContainer;\r\n","export const convertToPln = (amount, euro) => {\r\n    let plnAmount = euro * amount;\r\n    let roundAmount = plnAmount.toFixed(2);\r\n    plnAmount = Math.round(roundAmount * 100) / 100;\r\n    return plnAmount\r\n}\r\n","import React from 'react';\r\nimport { convertToPln } from '../../../../lib/helpers';\r\n\r\nconst TransactionsList = ({ transactionsList, actualCurrencyAmount, removeTransaction }) => {\r\n    return (\r\n        <div className=\"transactionsList\">\r\n            <div className={\"listTitle\"}>\r\n                <span>Nazwa transakcji </span><span>EURO</span> = <span>PLN</span>\r\n            </div>\r\n            <ul>\r\n                {transactionsList.map(elem => {\r\n                    let plnAmount = convertToPln(actualCurrencyAmount, elem.euro)\r\n                    return (\r\n                        <li key={elem.id}>\r\n                            <span>{elem.name} </span><span>{elem.euro}</span> = <span>{plnAmount}</span>\r\n                            <button onClick={() => { removeTransaction(elem.id) }}>Usuń</button>\r\n                        </li>)\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransactionsList\r\n","import React from 'react'\r\nimport TransactionsList from './TransactionsList'\r\n\r\nconst TransactionsListContainer = ({ transactionsList, actualCurrencyAmount, deleteTransaction }) => {\r\n\r\n    const removeTransaction = (transactionId) => {\r\n        deleteTransaction(transactionId);\r\n    }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <TransactionsList\r\n            transactionsList={transactionsList}\r\n            actualCurrencyAmount={actualCurrencyAmount}\r\n            removeTransaction={removeTransaction} />\r\n    )\r\n}\r\n\r\nexport default TransactionsListContainer\r\n","import React from 'react'\r\n\r\nconst TransactionsSum = ({ sumTransactions, sumPln, sumEuro }) => {\r\n\r\n    return (\r\n        <div className=\"transactionSum\">\r\n            <p>Suma wszystkich transakcji</p>\r\n            <div>Ilość: {sumTransactions}</div>\r\n            <div>EURO: {sumEuro}</div>\r\n            <div>PLN: {sumPln}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransactionsSum;\r\n","import React from 'react'\r\nimport TransactionsSum from './TransactionsSum';\r\nimport { convertToPln } from '../../../../lib/helpers';\r\n\r\nconst TransactionsSumContainer = ({ transactionsList, actualCurrencyAmount }) => {\r\n    \r\n    let transactionsEuroAmount = transactionsList.map(elem => elem.euro);\r\n    let sumEuro = transactionsEuroAmount.reduce(function (sum, current) {\r\n        return sum + current;\r\n    }, 0);\r\n\r\n    let sumPln = convertToPln(actualCurrencyAmount, sumEuro)\r\n\r\n    let sumTransactions = transactionsList.length;\r\n\r\n    return (\r\n        <TransactionsSum\r\n            sumTransactions={sumTransactions}\r\n            sumEuro={sumEuro}\r\n            sumPln={sumPln} />\r\n    )\r\n}\r\n\r\nexport default TransactionsSumContainer;\r\n","import React from 'react'\r\n\r\nconst TransactionLargest = ({ currentLargestTransaction }) => {\r\n\r\n    return (\r\n        <div className=\"transactionLargest\">\r\n            <h3>Transakcja o największej kwocie</h3>\r\n            <ul>{currentLargestTransaction}</ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransactionLargest;\r\n","import React from 'react'\r\nimport TransactionLargest from './TransactionLargest';\r\nimport { convertToPln } from '../../../../lib/helpers';\r\n\r\nconst TransactionLargestContainer = ({ transactionsList, actualCurrencyAmount }) => {\r\n\r\n    let transactionsEuroAmount = transactionsList.map(elem => elem.euro);\r\n    let largestEuroAmount = Math.max.apply(null, transactionsEuroAmount);\r\n\r\n    let currentLargestTransaction = transactionsList\r\n        .filter(elem => elem.euro === largestEuroAmount)\r\n        .map(elem => {\r\n            let plnAmount = convertToPln(actualCurrencyAmount, elem.euro)\r\n            return (\r\n                <li key={elem.id}> <p>{elem.name} {elem.euro} EURO = {plnAmount} PLN</p></li>\r\n            )\r\n        })\r\n\r\n    return (\r\n        <TransactionLargest currentLargestTransaction={currentLargestTransaction}/>\r\n    )\r\n}\r\n\r\nexport default TransactionLargestContainer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TransactionsCreatorContainer from './TransactionsCreator/TransactionsCreatorContainer';\r\nimport TransactionsListContainer from './TransactionsList/TransactionsListContainer';\r\nimport TransactionsSumContainer from './TransactionsAmount/TransactionsSumContainer';\r\nimport TransactionLargestContainer from './TransactionLargest/TransactionLargestContainer';\r\nimport { addTransaction, deleteTransaction } from '../../../actions';\r\n\r\nconst Transactions = ({ transactionsList, actualCurrencyAmount, addTransaction, deleteTransaction }) => {\r\n    return (\r\n        <div className=\"transactions\">\r\n            <TransactionsCreatorContainer\r\n                addTransaction={addTransaction} />\r\n            <TransactionsListContainer\r\n                transactionsList={transactionsList}\r\n                actualCurrencyAmount={actualCurrencyAmount}\r\n                deleteTransaction={deleteTransaction} />\r\n            <TransactionsSumContainer\r\n                transactionsList={transactionsList}\r\n                actualCurrencyAmount={actualCurrencyAmount} />\r\n            <TransactionLargestContainer\r\n                transactionsList={transactionsList} \r\n                actualCurrencyAmount={actualCurrencyAmount} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        actualCurrencyAmount: state.currency.actualCurrencyAmount,\r\n        transactionsList: state.transactions.transactionsList,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { addTransaction, deleteTransaction })(Transactions);\r\n","import React from 'react';\r\nimport CurrencyDefinitionContainer from './CurrencyDefinition/CurrencyDefinitionContainer';\r\nimport Transactions from './Transactions/Transactions';\r\n\r\nconst Converter = () => {\r\n    return (\r\n        <div>\r\n            <CurrencyDefinitionContainer />\r\n            <Transactions />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Converter;\r\n","import React from 'react';\nimport Title from './Title/Title';\nimport Converter from './Converter/Converter';\n\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Title />\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","var ids = require('short-id');\r\n\r\nconst initialState = {\r\n  transactionsList: [\r\n    { id: 1, name: 'First', euro: 25 },\r\n    { id: 2, name: 'Second', euro: 2 },\r\n    { id: 3, name: 'Third', euro: 11 },\r\n  ]\r\n}\r\n\r\nconst transactions = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactionsList: [\r\n          ...state.transactionsList,\r\n          {\r\n            id: ids.generate(),\r\n            name: action.name,\r\n            euro: action.euroAmount\r\n          }\r\n        ]\r\n      }\r\n    case 'DELETE_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactionsList:\r\n          state.transactionsList.filter((transaction) => transaction.id !== action.transactionId)\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default transactions;","const initialState = {\r\n  actualCurrencyAmount: 4.41\r\n}\r\n\r\nconst currency = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_CURRENCY_AMOUNT':\r\n      return {\r\n        ...state,\r\n        actualCurrencyAmount: action.value\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default currency;","import { combineReducers } from 'redux';\r\nimport transactions from './transactions';\r\nimport currency from './currency';\r\n\r\nexport default combineReducers({\r\n    currency,\r\n    transactions,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}